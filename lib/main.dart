import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/material.dart';
import 'package:flutter_application_1/bottom_navigation.dart';
import 'package:flutter_application_1/custom_alert_dialog.dart';
import 'package:flutter_application_1/signup.dart';
import 'package:provider/provider.dart';
import 'package:firebase_auth/firebase_auth.dart'; // Import Firebase Auth
import 'tutor_rating_provider.dart';
import 'package:flutter_application_1/auth_repository.dart';
import 'firebase_options.dart'; // Ensure you have this file generated by Firebase CLI.
// import 'sign_up_page.dart'; // Uncomment if `SignUpPage` exists
// import 'bottom_navigation.dart'; // Uncomment if `BottomNavigation` exists

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  runApp(
    MultiProvider(
      providers: [
        ChangeNotifierProvider(create: (context) => TutorRatingProvider()),
      ],
      child: const MyApp(),
    ),
  );
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Peer Tutoring App',
      theme: ThemeData(primarySwatch: Colors.blue),
      home: const AuthenticationPage(), // Use `AuthenticationPage` as the entry point
    );
  }
}

class LoginPage extends StatelessWidget {
  const LoginPage({super.key});

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: const BoxDecoration(
        gradient: LinearGradient(colors: [Color.fromARGB(255, 125, 180, 225), Color.fromARGB(255, 28, 95, 239)]),
      ),
      child: const Scaffold(
        backgroundColor: Colors.transparent,
        body: LoginPageBody(),
      ),
    );
  }
}

class LoginPageBody extends StatefulWidget {
  const LoginPageBody({super.key});

  @override
  State<LoginPageBody> createState() => LoginPageBodyState();
}

class LoginPageBodyState extends State<LoginPageBody> {
  final emailController = TextEditingController();
  final passwordController = TextEditingController();

  Widget _icon() {
    return Container(
      width: 100,
      height: 100,
      decoration: BoxDecoration(
        border: Border.all(color: Colors.white, width: 2),
        shape: BoxShape.circle,
      ),
      child: const Icon(
        Icons.person,
        color: Colors.white,
        size: 50,
      ),
    );
  }

  Widget _inputField(String hintText, TextEditingController controller, {bool isPassword = false}) {
    var border = OutlineInputBorder(
      borderRadius: BorderRadius.circular(18),
      borderSide: const BorderSide(color: Colors.black),
    );
    return TextField(
      obscureText: isPassword,
      style: const TextStyle(color: Colors.black),
      controller: controller,
      decoration: InputDecoration(
        hintText: hintText,
        hintStyle: const TextStyle(color: Colors.black),
        enabledBorder: border,
        focusedBorder: border,
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(32.0),
      child: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            _icon(),
            const SizedBox(height: 20),
            _inputField("Email", emailController),
            const SizedBox(height: 20),
            _inputField("Password", passwordController, isPassword: true),
            const SizedBox(height: 30),
            ElevatedButton(
              onPressed: () {
                // Add login logic here
                try {
                  AuthRepository().login(emailController, passwordController);
                } catch (e) {
                  CustomAlertDialog().showAlertMessage(
                    context,
                    title: 'Error when logging in',
                    body: 'Email or/and password is incorrect.',
                  );
                }
              },
              child: const SizedBox(
                width: double.infinity,
                child: Text(
                  "Login",
                  textAlign: TextAlign.center,
                ),
              ),
            ),
            ElevatedButton(
              onPressed: () {
                // Go to sign up page.
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => SignUpPage()), // Ensure `SignUpPage` is defined or imported
                );
              },
              child: const SizedBox(
                width: double.infinity,
                child: Text(
                  "Sign Up",
                  textAlign: TextAlign.center,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class AuthenticationPage extends StatefulWidget {
  const AuthenticationPage({super.key});

  @override
  State<AuthenticationPage> createState() => AuthenticationPageState();
}

class AuthenticationPageState extends State<AuthenticationPage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: StreamBuilder<User?>(
        stream: FirebaseAuth.instance.authStateChanges(),
        builder: (context, snapshot) {
          if (snapshot.hasData) {
            return const BottomNavigation(role: '',); // Ensure `BottomNavigation` is defined or imported
          } else {
            return const LoginPageBody();
          }
        },
      ),
    );
  }
}
